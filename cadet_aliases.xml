<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>cadet_gui</name>
			<script></script>
			<command></command>
			<packageName>cadet_gui</packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Execute Lua Commands (/)</name>
				<script>local f, e = loadstring("return "..matches[2])
if not f then
  f, e = assert(loadstring(matches[2]))
end

local r =
  function(...)
    if not table.is_empty({...}) then
      display(...)
    end
  end
r(f())</script>
				<command></command>
				<packageName></packageName>
				<regex>^/(.*)$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>mudlet-mapper</name>
				<script></script>
				<command></command>
				<packageName>mudlet-mapper</packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Mudlet Mapper</name>
					<script>mudlet = mudlet or {}; mudlet.mapper_script = true</script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Go to ID or area</name>
						<script>local where = matches[2]:lower()
local gallop
if command:ends("gallop") then
  gallop = "gallop"
  where = where:sub(1, -8)
elseif command:ends("sprint") then
  gallop = "sprint"
  where = where:sub(1, -8)
elseif command:ends("dash") then
  gallop = "dash"
  where = where:sub(1, -6)
elseif command:ends("runaway") then
  gallop = "runaway"
  where = where:sub(1, -9)
elseif command:ends("glide") then
  gallop = "glide"
  where = where:sub(1, -7)
end
if mmp.debug then
  mmp.gotoPerf = mmp.gotoPerf or createStopWatch()
  startStopWatch(mmp.gotoPerf)
end
-- goto room ID
if tonumber(where) then
  mmp.gotoRoom(where, gallop)
else
  -- goto area or feature
  local split = where:split(" ")
  if split[1] == "feature" then
	  table.remove(split, 1)
    mmp.gotoFeature(table.concat(split, " "), gallop)
  else
    if tonumber(split[#split]) then
      mmp.gotoArea(where:sub(1, -#(split[#split]) - 2), tonumber(split[#split]), gallop)
    else
      mmp.gotoArea(where, nil, gallop)
    end
  end
end
if mmp.debug then
  mmp.echo("goto alias took " .. stopStopWatch(mmp.gotoPerf) .. "s to run.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^goto (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>View roomID or area</name>
						<script>local where = matches[2]

if not where then
	centerview(mmp.currentroom)
elseif tonumber(where) then -- view a room ID
	centerview(where)
else -- view an area
	mmp.viewArea (where)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^mmap ?(.+)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Toggle pause</name>
						<script>mmp.pause(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^mpp(?:\s?(on|off))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Stop walking</name>
						<script>mmp.stop()</script>
						<command></command>
						<packageName></packageName>
						<regex>^mstop$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Option</name>
						<script>if not matches[2] then
	mmp.settings:showAllOptions(mmp.game)
	return
end

local val = matches[4]
if val == "true" or val == "yes" or val == "on" then val = true end
if val == "false" or val == "no" or val == "off" then val = false end

mmp.settings:setOption(matches[3], val)</script>
						<command></command>
						<packageName></packageName>
						<regex>^mconfig( (\w+) (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Display area for lock/unlock</name>
						<script>mmp.doLockArea(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^arealock(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Add a room label</name>
						<script>mmp.roomLabel(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^room label (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>View/delete area labels</name>
						<script>mmp.areaLabels(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^area labels ?(.+)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Room find</name>
						<script>mmp.roomFind(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:rf|room find) (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Room look</name>
						<script>mmp.roomLook(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:rl|room look)(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Room list</name>
						<script>mmp.echoRoomList(matches[2] or mmp.areatabler[getRoomArea(mmp.currentroom)])</script>
						<command></command>
						<packageName></packageName>
						<regex>^room list(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Area list</name>
						<script>mmp.echoAreaList()</script>
						<command></command>
						<packageName></packageName>
						<regex>^area list$</regex>
					</Alias>
					<AliasGroup isActive="no" isFolder="yes">
						<name>mm Mapping</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Manually set the room coordinates</name>
							<script>-- want the current room, but we're lost
if matches[2] == '' and (not mmp.currentroom or not mmp.roomexists(mmp.currentroom)) then mmp.echo("Don't know where we are at the moment.") return end

-- want another room, but it doesn't actually exist
if matches[2] ~= '' and not mmp.roomexists(matches[2]) then mmp.echo("v"..matches[2].." doesn't exist.") return end

local m = matches[3]
local rid, rname = (matches[2] ~= "" and matches[2] or mmp.currentroom),
  (matches[2] ~= "" and getRoomName(matches[2]) or mmp.currentroomname)
local x,y,z

local function set() -- small func to set things
  setRoomCoordinates(rid, x, y, z)
  mmp.echo(string.format("%s (%d) is now at %dx, %dy, %dz.\n", rname, rid, x,y,z))
  centerview(rid)
end

-- let's be flexible and allow several ways if giving an arg
-- rc x y z
x,y,z = string.match(m, "(%-?%d+) (%-?%d+) (%-?%d+)")
if x then
  set(); return
end

-- rc xx? yy? zz?
x,y,z = string.match(m, "(%-?%d+)x"), string.match(m, "(%-?%d+)y"), string.match(m, "(%-?%d+)z")
if x or y or z then
  -- merge w/ old coords if any are missing
  local ox, oy, oz = getRoomCoordinates(rid)
  x = x or ox; y = y or oy; z = z or oz
  set(); return
end

-- rc left/west, right/east, ...
local ox, oy, oz = getRoomCoordinates(rid)
local has = table.contains
for w in string.gmatch(m, "%a+") do
  if has({"west", "left", "w", "l"}, w) then
    x = (x or ox) - 1; y = (y or oy); z = (z or oz)
  elseif has({"east", "right", "e", "r"}, w) then
    x = (x or ox) + 1; y = (y or oy); z = (z or oz)
  elseif has({"north", "top", "n", "t"}, w) then
    x = (x or ox); y = (y or oy) + 1; z = (z or oz)
  elseif has({"south", "bottom", "s", "b"}, w) then
    x = (x or ox); y = (y or oy) - 1; z = (z or oz)
  elseif has({"northwest", "topleft", "nw", "tl"}, w) then
    x = (x or ox) - 1; y = (y or oy) + 1; z = (z or oz)
  elseif has({"northeast", "topright", "ne", "tr"}, w) then
    x = (x or ox) + 1; y = (y or oy) + 1; z = (z or oz)
  elseif has({"southeast", "bottomright", "se", "br"}, w) then
    x = (x or ox) + 1; y = (y or oy) - 1; z = (z or oz)
  elseif has({"southwest", "bottomleft", "sw", "bl"}, w) then
    x = (x or ox) - 1; y = (y or oy) - 1; z = (z or oz)
  elseif has({"up", "u"}, w) then
    x = (x or ox); y = (y or oy); z = (z or oz) + 1
  elseif has({"down", "d"}, w) then
    x = (x or ox); y = (y or oy); z = (z or oz) - 1
  end

end
if x then set(); return end

mmp.echo([[Where do you want to move the room to?
  You can use direct coordinates or relative directions.]])</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:rc|room coords) (?:v(\d+) )?(.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add a special exit</name>
							<script>-- spe clear and spe list match on this
if matches[2] == "clear" or matches[2] == "list" then return end

-- need the current room, but we're lost
if not mmp.currentroom or not mmp.roomexists(mmp.currentroom) then mmp.echo("Don't know where we are at the moment.") return end

local otherroom = tonumber(matches[2]) or mmp.relativeroom(mmp.currentroom, matches[2])

-- need the another room, but it doesn't actually exist
if not otherroom or not mmp.roomexists(otherroom) then mmp.echo(matches[2].." doesn't exist.") return end

addSpecialExit(mmp.currentroom, tonumber(otherroom), matches[3])
addSpecialExit(mmp.currentroom, tonumber(otherroom), matches[3])
mmp.echo(string.format("Added special exit with command '%s' to %s (%d).", matches[3], getRoomName(otherroom), otherroom))
centerview(mmp.currentroom)</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:spe|exit special) (\w+) (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add a special exit from one remote room to another</name>
							<script>local room1, room2 = tonumber(matches[2]), tonumber(matches[3])

if not room1 or not mmp.roomexists(room1) then
  mmp.echo("Room #"..matches[2].." doesn't exist - create it first, or make sure you got the room ID right?")
  return
end

if not room2 or not mmp.roomexists(room2) then
  mmp.echo("Room #"..matches[3].." doesn't exist - create it first, or make sure you got the room ID right?")
  return
end

addSpecialExit(room1, room2, matches[4])
mmp.echo(string.format("Added special exit with command '%s' to from %s (%d) to %s (%d).", matches[4], getRoomName(room1), room1, getRoomName(room2), room2))</script>
							<command></command>
							<packageName></packageName>
							<regex>^spev (\d+) (\d+) (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>List special exits</name>
							<script>mmp.listSpecialExits(matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^spe list(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Clear all special exits</name>
							<script>-- want the current room, but we're lost
if not matches[2] and (not mmp.currentroom or not mmp.roomexists(mmp.currentroom)) then mmp.echo("Don't know where we are at the moment.") return end

-- want another room, but it doesn't exist
if matches[2] and tonumber(matches[2]) and not mmp.roomexists(matches[2]) then mmp.echo("v"..matches[2].." doesn't exist.") return end

-- or a relative one
if matches[2] and not tonumber(matches[2]) and not mmp.relativeroom(mmp.currentroom, matches[2]) then mmp.echo("There is no room "..matches[2].. " of us.") return end

local rid = (not matches[2] and mmp.currentroom or (tonumber(matches[2]) or mmp.relativeroom(mmp.currentroom, matches[2])))

clearSpecialExits(rid)
mmp.echo(string.format("Cleared all special exits in %s (%d).\n", getRoomName(rid), rid))</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:spe clear|exit special clear) ?(\w+)?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Create a room</name>
							<script>local m = matches[2]
if m:starts("feature") then
  -- another alias was meant.
  return
end
local rid, rname
if mmp.roomexists(mmp.currentroom) then
  rid, rname = mmp.currentroom, mmp.currentroomname
end
local x, y, z

local function set(newid)
  -- small func to set things
  local rid = newid or createRoomID()
  addRoom(rid)
  setRoomCoordinates(rid, x, y, z)
  if mmp.roomexists(mmp.currentroom) then
    setRoomArea(rid, getRoomArea(mmp.currentroom))
  end
  if mmp.roomexists(mmp.currentroom) then
    setRoomEnv(rid, getRoomEnv(mmp.currentroom))
  end
  setExit(mmp.currentroom, rid, m)
  mmp.echo(string.format("Created new room (%d) at %dx, %dy, %dz.\n", rid, x, y, z))
  centerview(mmp.roomexists(mmp.currentroom) and mmp.currentroom or rid)
  if not mmp.roomexists(mmp.currentroom) then
    mmp.currentroom = rid;
    mmp.currentroomname = ""
  end
end

-- let's be flexible and allow several ways if giving an arg
-- rc v# x y z
newid, x, y, z = string.match(m, "v(%d+) (%-?%d+) (%-?%d+) (%-?%d+)")
if x then
  set(newid);
  return
end
-- rc x y z
x, y, z = string.match(m, "(%-?%d+) (%-?%d+) (%-?%d+)")
if x then
  set();
  return
end
if not rid then
  mmp.echo("Don't know where we are at the moment in order to use relative coordinates.")
  return
end
-- rc xx? yy? zz?
x, y, z = string.match(m, "(%-?%d+)x"), string.match(m, "(%-?%d+)y"), string.match(m, "(%-?%d+)z")
if x or y or z then
  -- merge w/ old coords if any are missing
  local ox, oy, oz = getRoomCoordinates(rid)
  x = x or ox;
  y = y or oy;
  z = z or oz
  set();
  return
end
-- rc left/west, right/east, ...
local ox, oy, oz = getRoomCoordinates(rid)
local has = table.contains
for w in string.gmatch(m, "%a+") do
  if has({"west", "left", "w", "l"}, w) then
    x = (x or ox) - 1;
    y = (y or oy);
    z = (z or oz)
  elseif has({"east", "right", "e", "r"}, w) then
    x = (x or ox) + 1;
    y = (y or oy);
    z = (z or oz)
  elseif has({"north", "top", "n", "t"}, w) then
    x = (x or ox);
    y = (y or oy) + 1;
    z = (z or oz)
  elseif has({"south", "bottom", "s", "b"}, w) then
    x = (x or ox);
    y = (y or oy) - 1;
    z = (z or oz)
  elseif has({"northwest", "topleft", "nw", "tl"}, w) then
    x = (x or ox) - 1;
    y = (y or oy) + 1;
    z = (z or oz)
  elseif has({"northeast", "topright", "ne", "tr"}, w) then
    x = (x or ox) + 1;
    y = (y or oy) + 1;
    z = (z or oz)
  elseif has({"southeast", "bottomright", "se", "br"}, w) then
    x = (x or ox) + 1;
    y = (y or oy) - 1;
    z = (z or oz)
  elseif has({"southwest", "bottomleft", "sw", "bl"}, w) then
    x = (x or ox) - 1;
    y = (y or oy) - 1;
    z = (z or oz)
  elseif has({"up", "u"}, w) then
    x = (x or ox);
    y = (y or oy);
    z = (z or oz) + 1
  elseif has({"down", "d"}, w) then
    x = (x or ox);
    y = (y or oy);
    z = (z or oz) - 1
  end
end
if x then
  set();
  return
end
mmp.echo(
  [[Where do you want to move the room to?
  You can use direct coordinates or relative directions.]]
)</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:rlc|room create) (.+)?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Create a link between two rooms</name>
							<script>-- need the current room, but we're lost
if not mmp.currentroom or not mmp.roomexists(mmp.currentroom) then mmp.echo("Don't know where we are at the moment.") return end

-- make sure the dir is valid
local dir = mmp.anytolong(matches[3])
if not dir then mmp.echo(matches[3].." isn't a valid normal exit.") return end

-- if we don't give a room number, then we want to auto-locate an appropriate room nearby.
local otherroom
if matches[2] == "" then
  local w = matches[3]
  local ox, oy, oz, x,y,z = getRoomCoordinates(mmp.currentroom)
  local has = table.contains
  if has({"west", "left", "w", "l"}, w) then
    x = (x or ox) - 1; y = (y or oy); z = (z or oz)
  elseif has({"east", "right", "e", "r"}, w) then
    x = (x or ox) + 1; y = (y or oy); z = (z or oz)
  elseif has({"north", "top", "n", "t"}, w) then
    x = (x or ox); y = (y or oy) + 1; z = (z or oz)
  elseif has({"south", "bottom", "s", "b"}, w) then
    x = (x or ox); y = (y or oy) - 1; z = (z or oz)
  elseif has({"northwest", "topleft", "nw", "tl"}, w) then
    x = (x or ox) - 1; y = (y or oy) + 1; z = (z or oz)
  elseif has({"northeast", "topright", "ne", "tr"}, w) then
    x = (x or ox) + 1; y = (y or oy) + 1; z = (z or oz)
  elseif has({"southeast", "bottomright", "se", "br"}, w) then
    x = (x or ox) + 1; y = (y or oy) - 1; z = (z or oz)
  elseif has({"southwest", "bottomleft", "sw", "bl"}, w) then
    x = (x or ox) - 1; y = (y or oy) - 1; z = (z or oz)
  elseif has({"up", "u"}, w) then
    x = (x or ox); y = (y or oy); z = (z or oz) + 1
  elseif has({"down", "d"}, w) then
    x = (x or ox); y = (y or oy); z = (z or oz) - 1
  end

  local carea = getRoomArea(mmp.currentroom)
  if not carea then mmp.echo("Don't know what area are we in.") return end

  otherroom = select(2, next(getRoomsByPosition(carea,x,y,z)))

  if not otherroom then
    mmp.echo("There isn't a room to the "..w.." that I see - try with an exact room id.") return
  end

else
  if not mmp.roomexists(matches[2]) then -- check that an explicit other room ID is valid
    mmp.echo("A room with id "..matches[2].. " doesn't exist.") return
  else
    otherroom = tonumber(matches[2])
  end
end

if setExit(mmp.currentroom, otherroom, matches[3]) then
  if not matches[4] then setExit(otherroom, mmp.currentroom, mmp.ranytolong(matches[3])) end

  mmp.echo(string.format("Linked %s (%d) to %s (%d) via a %s%s exit.",
    (getRoomName(mmp.currentroom) ~= "" and getRoomName(mmp.currentroom) or "''"), mmp.currentroom, (getRoomName(otherroom) ~= "" and getRoomName(otherroom) or "''"), otherroom, (matches[4] and "one-way " or ''), matches[3]))
else
  mmp.echo("Couldn't create an exit.")
end
centerview(mmp.currentroom)</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:rlk|room link) ?(\d+)? (\w+)( one)?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete a room</name>
							<script>-- want the current room, but we're lost
if not matches[2] and (not mmp.currentroom or not mmp.roomexists(mmp.currentroom)) then mmp.echo("Don't know where we are at the moment.") return end

-- want another room, but it doesn't exist
if matches[2] and tonumber(matches[2]) and not mmp.roomexists(matches[2]) then mmp.echo("v"..matches[2].." doesn't exist.") return end

-- or a relative one
if matches[2] and not tonumber(matches[2]) and not mmp.relativeroom(mmp.currentroom, matches[2]) then mmp.echo("There is no room "..matches[2].. " of us.") return end

local rid = (not matches[2] and mmp.currentroom or (tonumber(matches[2]) or mmp.relativeroom(mmp.currentroom, matches[2])))

local n = getRoomName(rid)
deleteRoom(rid)
mmp.echo(string.format("Deleted the %s (%d) room.\n", (n ~= "" and n or "''"), rid))
centerview(mmp.currentroom)</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:rld|room delete) ?(\w+)?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete a link</name>
							<script>-- need the current room, but we're lost
if not mmp.currentroom or not mmp.roomexists(mmp.currentroom) then mmp.echo("Don't know where we are at the moment.") return end

-- make sure the dir is valid
local dir = mmp.anytolong(matches[2])
if not dir then mmp.echo(matches[2].." isn't a valid normal exit.") return end

-- gone already?
if not getRoomExits(mmp.currentroom)[dir] then mmp.echo(dir.." link doesn't exist already.") end

-- locate the room on the other end, so we can unlink it from there as well if necessary
local otherroom
if getRoomExits(getRoomExits(mmp.currentroom)[dir])[mmp.ranytolong(dir)] then
  otherroom = getRoomExits(mmp.currentroom)[dir]
end

if setExit(mmp.currentroom, -1, dir) then
  if otherroom then
    if setExit(otherroom, -1, mmp.ranytolong(dir)) then
      mmp.echo(string.format("Deleted the %s exit from %s (%d).",
        dir, getRoomName(mmp.currentroom), mmp.currentroom))
     else mmp.echo("Couldn't delete the incoming exit.") end
  else
    mmp.echo(string.format("Deleted the one-way %s exit from %s (%d).",
      dir, getRoomName(mmp.currentroom), mmp.currentroom))
  end
else
  mmp.echo("Couldn't delete the outgoing exit.")
end
centerview(mmp.currentroom)</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:urlk|room unlink) (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Move room to another area</name>
							<script>mmp.roomArea(matches[2], matches[3])</script>
							<command></command>
							<packageName></packageName>
							<regex>^room area (?:v(\d+) )?(.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Set a room character</name>
							<script>local room = matches[3] or mmp.currentroom
room = tonumber(room) or mmp.relativeroom(mmp.currentroom, room)
if not room or not mmp.roomexists(room) then
  mmp.echo("Sorry - which room do you want to put this character in? I don't know where you are at the moment, if you want to do the current room.")
  return
end

local char = matches[2]

if char == "clear" then
  setRoomChar(room, ' ')
  mmp.echo("Cleared the character from "..room.." ("..getRoomName(room)..")")
else
  setRoomChar(room, char)
  mmp.echo("Set the "..char:sub(1,1).." character on "..room.." ("..getRoomName(room)..")")
end
centerview(mmp.currentroom)</script>
							<command></command>
							<packageName></packageName>
							<regex>^rcc ([^ ]+)(?: (\w+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Set room weight</name>
							<script>local weight = tonumber(matches[3]), room
if matches[2] == '' then room = mmp.currentroom
else
  room = tonumber(matches[2]) or mmp.relativeroom(mmp.currentroom, matches[2])
end

if not room or not mmp.roomexists(room) then
  mmp.echo("Sorry - which room do you want to set the weight on? I don't know where you are at the moment, if you want to do the current room.")
  return
end

if not weight then
  mmp.echo("What weight do you want to set on #"..room.."?")
end

local oldweight = getRoomWeight(room)
setRoomWeight(room, weight)

if weight &gt; oldweight then
  mmp.echo("Increased the room weight on #"..room.." ("..getRoomName(room)..") by "..(weight-oldweight).." to "..weight.." - making it less desirable to travel through.")
elseif weight &lt; oldweight then
  mmp.echo("Decreased the room weight on #"..room.." ("..getRoomName(room)..") by "..(oldweight-weight).." to "..weight.." - making it more desirable to travel through.")
else
  mmp.echo("The room weight on #"..room.." ("..getRoomName(room)..") is already "..weight..".")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^rw(?: (\w+))? (\d+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Set exit weight</name>
							<script>local room = (matches[2] ~= "" and tonumber(matches[2]) or mmp.currentroom)

local weight, exit = tonumber(matches[3]), matches[4]

if not roomExists(room) then mmp.echo("Room "..room.." doesn't exist. It has to before we can set weights on exits.") return end

setExitWeight(room, exit, weight)

mmp.echo(string.format("Set the weight on the %d room going %s to %s. If it's a two-way exit, please set the reverse exit as well.", room, exit, weight))</script>
							<command></command>
							<packageName></packageName>
							<regex>^rwe(?: (\d+))? (\d+) (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add/delete doors</name>
							<script>local room = (matches[2] ~= "" and tonumber(matches[2]) or mmp.currentroom)

local direction, status = matches[3], matches[4]

if not roomExists(room) then mmp.echo("Room "..room.." doesn't exist. It has to before we can make doors in it.") return end

local validdirs = {'e', 's', 'w', 'n', 'ne', 'se', 'sw', 'nw', 'in', 'out', 'up', 'down'}

if not table.contains(validdirs, direction) then
  mmp.echo("Can't make a door in the '"..direction.."' direction - available choices are:\n  "..table.concat(validdirs, ', '))
  return
end

local statusnum

if status == "" or status == "open" or status == "o" then
  statusnum = 1
elseif status == "closed" or status ==  "c" then
  statusnum = 2
elseif status == "locked" or status ==  "l" then
  statusnum = 3
elseif status == "clear" or status == "gone" then
  statusnum = 0
end

if not statusnum then mmp.echo("Unrecognized option - a door can be open, closed, locked or gone.") return end

setDoor(room, direction, statusnum)

if statusnum == 0 then
  mmp.echo("OK, door removed.")
else
  mmp.echo("OK, door added/adjusted.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^rd(?: (\d+))? (\w+)(?: (\w+))?$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>-- (area functions)</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Create an area</name>
							<script>local t = getAreaTable(); local tr = {}; for k,v in pairs(t) do tr[v] = k end
local newid = table.maxn(tr) + 1

setAreaName( newid, matches[2] )
mmp.echo(string.format("Created new area %s (%d)", matches[2], newid))
centerview(mmp.currentroom)
raiseEvent("mmp areas changed")</script>
							<command></command>
							<packageName></packageName>
							<regex>^area add (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete an area</name>
							<script>mmp.deleteArea(matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^area delete (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Cancel area deletion</name>
							<script>if not mmp.deletingarea then mmp.echo("I wasn't deleting any areas already.") return end

local areaname = mmp.deletingarea.areaname
mmp.deletingarea = nil

mmp.echo("Stopped deleting rooms in the '"..areaname.."'. The area is partially missing its rooms now, you'll want to restart the process to finish it.")</script>
							<command></command>
							<packageName></packageName>
							<regex>^cancel area deletion$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Rename an area</name>
							<script>mmp.renameArea(matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^area rename (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>List continents</name>
							<script>local continents = mmp.getcontinents()

if not next(continents) then mmp.echo("No continents known.")
else
  for continent, areadata in pairs(continents) do
    mmp.echo(continent.." continent:")

    for _, areaid in ipairs(areadata) do
      cecho("  "..getRoomAreaName(areaid).."\n")
    end
  end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:acl|area continents)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add area to continent</name>
							<script>-- aca continent [optional area]

local continent = matches[2]:title()
local area
if not matches[3] then area = getRoomArea(mmp.currentroom)
elseif tonumber(matches[3]) then
  area = tonumber(matches[3])
  if getRoomAreaName(area) == -1 then area = nil end
else
  local areas = getAreaTable()

  for karea, id in pairs(areas) do if karea:lower():find(matches[3]:lower(), 1, true) then area = id break end end
end

if not area then mmp.echo(matches[3].." isn't a known area. Which one do you want to set?") return end

local res, error = mmp.addcontinent(area, continent)
if res then
  mmp.echo("Recorded that "..getRoomAreaName(area).." is on the "..continent.." continent.")
else
  mmp.echo(error)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^aca ([\w']+)(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>remove area from continent</name>
							<script>-- acr continent [optional area]

local continent = matches[2]:title()
local area
if not matches[3] then area = getRoomArea(mmp.currentroom)
elseif tonumber(matches[3]) then
  area = tonumber(matches[3])
  if getRoomAreaName(area) == -1 then area = nil end
else
  local areas = getAreaTable()

  for karea, id in pairs(areas) do if karea:lower():find(matches[3]:lower(), 1, true) then area = id break end end
end

if not area then mmp.echo(matches[3].." isn't a known area. Which one do you want to set?") return end

local res, error = mmp.removecontinent(area, continent)
if res then
  mmp.echo("Recorded that "..getRoomAreaName(area).." is not on the "..continent.." continent.")
else
  mmp.echo(error)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^acr ([\w']+)(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add/remove a ferry room</name>
							<script>local room = tonumber(matches[2])

if matches[3] == "add" then
  if mmp.ferry_rooms[room] then
    mmp.echo("Ferry room #"..room.." is already recorded as such.") return
  else
    mmp.ferry_rooms[room] = true; mmp.echo("Added #"..room.." to be a ferry room.")
  end
else
  if not mmp.ferry_rooms[room] then
    mmp.echo("Room #"..room.." isn't a ferry one already.") return
  else
    mmp.ferry_rooms[room] = nil; mmp.echo("Removed #"..room.." from being a ferry room.")
  end
end

local keys = {}; for k,_ in pairs(mmp.ferry_rooms) do keys[#keys+1] = k end

setRoomUserData(1, "ferry rooms", yajl.to_string(keys))</script>
							<command></command>
							<packageName></packageName>
							<regex>^fr (\d+) (add|remove)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Show ferry rooms</name>
							<script>mmp.echo("Ferry rooms available:")
if not next(mmp.ferry_rooms) then  mmp.echo("(none)") return end

for k, _ in pairs(mmp.ferry_rooms) do
  mmp.echo(string.format("  (%d) - %s\n", k, getRoomName(k)))
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^fr show$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Weight ferry exits</name>
							<script>local ferryCommands = {
  ["buy passage to"] = {"achaea"},
  ["takeoff to"] = {"starmourn"},
  ["station transfer to"] = {"starmourn"}
}
local c = 0
local weight = 200
for area in pairs(mmp.areatabler) do
  local rooms = getAreaRooms(area) or {}
  for i = 0, #rooms do
    local exits = getSpecialExits(rooms[i] or 0)
    if exits and next(exits) then
      for exit, cmd in pairs(exits) do
        if type(cmd) == "table" then
          cmd = next(cmd)
        end
        local lowerCommand = cmd:lower()
        local found = false
        for ferryCommand, games in pairs(ferryCommands) do
          if table.contains(games, mmp.game) and lowerCommand:find(ferryCommand, 1, true) then
            found = true
            break
          end
        end
        if found then
          setExitWeight(rooms[i], cmd, weight)
          mmp.echo(
            "Weighted " .. cmd .. " going to " .. rooms[i] .. " (" .. getRoomName(rooms[i]) .. ")."
          )
          c = c + 1
        end
      end
    end
  end
end
mmp.echo(
  string.format(
    "%s ferry exits weighted to %s (so we don't take them over too short distances).", c, weight
  )
)</script>
							<command></command>
							<packageName></packageName>
							<regex>^weight ferry exits$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>-- (Map feature functions)</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Create map feature</name>
							<script>mmp.createMapFeature(matches[2]:trim(), (matches[3] and matches[3]:trim()))</script>
							<command></command>
							<packageName></packageName>
							<regex>^feature create (.+?)(?: char (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>List map features</name>
							<script>mmp.listMapFeatures()</script>
							<command></command>
							<packageName></packageName>
							<regex>^feature list$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add map feature to room</name>
							<script>mmp.roomCreateMapFeature(matches[3], matches[2] == "" and mmp.currentroom or tonumber(matches[2]))</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:room create feature|rcf) (?:v(\d+) )?(.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete map feature from room</name>
							<script>mmp.roomDeleteMapFeature(matches[3], matches[2] == "" and mmp.currentroom or tonumber(matches[2]))</script>
							<command></command>
							<packageName></packageName>
							<regex>^(?:room delete feature|rdf) (?:v(\d+) )?(.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete map feature</name>
							<script>mmp.deleteMapFeature(matches[2]:trim())</script>
							<command></command>
							<packageName></packageName>
							<regex>^feature delete (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>migrate features</name>
							<script>local translation
if mmp.game == "starmourn" then
  translation =
  {
    ["@"] = "landing dock",
    ["C"] = "cloning",
    ["R"] = "repair",
    ["$"] = "denizen shop",
    ["I"] = "insurance office",
    ["T"] = "transport",
    ["J"] = "junk",
    ["M"] = "mail",
    ["L"] = "lift",
    ["P"] = "ptp",
    ["TT"] = "trade terminal",
  }
else
  mmp.echo("Sorry, don't know which room character maps to which map feature for your game. Please contact us at https://discord.gg/PPUNnc3 to get this sorted out.")
	return
end
mmp.echo("Migrating room characters to map features...")
for char, feature in pairs(translation) do
  mmp.createMapFeature(feature, char)
end
for key in pairs(getRooms()) do
  local char = getRoomChar(key)
  if char ~= "" then
    if translation[char] then
      if not mmp.roomCreateMapFeature(translation[char], key) then
			  mmp.echo("An error occured when migrating room characters, see messages above for details. Migration incomplete!")
			  return
			end
    end
  end
end
mmp.echo("Migration done.")</script>
							<command></command>
							<packageName></packageName>
							<regex>^feature migrate$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>-- (dangerous functions)</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Clear the map completely</name>
							<script>if not mmp.map_delete_warning then
  mmp.echo("Are you really, really, really sure you want to delete all of the map to go to a blank state? Do the command again if you're certain.")
  mmp.map_delete_warning = true
  return
end

mmp.echo("Okay, deleting...")

tempTimer(.1, function()
  for name, id in pairs(getAreaTable()) do
    deleteArea(tonumber(id))
  end

  mmp.echo("Deleted everything. It's all gone.")
  mmp.map_delete_warning = nil
  centerview(1)
end)</script>
							<command></command>
							<packageName></packageName>
							<regex>^map delete all$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete shop stockroom exits</name>
							<script>mmp.echo("Deleting all known stockroom exits (rooms with $ and a down exit)")
local c = 0

for area, areaname in pairs(mmp.areatabler) do
  local rooms = getAreaRooms(area) or {}
  for i = 0, #rooms do
    if rooms[i] then
      local char = getRoomChar(rooms[i])
      if char == '$' then
        local exits = getRoomExits(rooms[i]) -- retrieve after $, more efficient

        if exits.down then
          setExit(rooms[i], -1, 'down')
          mmp.echo(string.format("Deleted the stockroom exit at %s (#%d in %s)", getRoomName(rooms[i]), rooms[i], mmp.areatabler[getRoomArea(rooms[i])]))
          c = c + 1
        end
      end
    end

  end
end

mmp.echo(string.format("Deleted %s known stockroom exit%s.", c, (c ~= 1 and 's' or '')))
centerview(mmp.currentroom)</script>
							<command></command>
							<packageName></packageName>
							<regex>^delete known stockrooms$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Clear continent data</name>
							<script>if not mmp.wipingcontinents then
  mmp.wipingcontinents = true
  mmp.echo("Are you sure you want to wipe all continent data? If yes, do this again.")
  return
end
mmp.wipingcontinents = nil

local toserialize = yajl.to_string{}
setRoomUserData(1, "areaContinents", toserialize)
mmp.echo("Wiped all continents data.")</script>
							<command></command>
							<packageName></packageName>
							<regex>^clear continent data$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete suffixed periods</name>
							<script>mmp.echo("Deleting removing all periods at the end of room names...")
local c = 0

for area, areaname in pairs(mmp.areatabler) do
  local rooms = getAreaRooms(area) or {}
  for i = 0, #rooms do
    local name = getRoomName(rooms[i] or 0)
    if string.ends(name, ".") then
      name = string.sub(name, 1, (#name-1))
      setRoomName(rooms[i], name)
      mmp.echo(string.format("Patched up room #%s - '%s'", rooms[i], name))
      c = c + 1
    end
  end
end

mmp.echo(string.format("Fixed up %s room%s.", c, (c ~= 1 and 's' or '')))</script>
							<command></command>
							<packageName></packageName>
							<regex>^delete suffixed periods$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Find single exits</name>
							<script>local c = 0

local getAreaRooms, getRoomExits, contains, echoLink, getRoomEnv, envidsr =
  getAreaRooms, getRoomExits, table.contains, echoLink, getRoomEnv, mmp.envidsr

for area, id in pairs(getAreaTable()) do
  for _, roomid in pairs(getAreaRooms(id)) do
    local exits = getRoomExits(roomid)
    for dir, otherroom in pairs(exits) do
      local otherexits = getRoomExits(otherroom) or {}
      if not contains(otherexits, roomid) then
        echoLink(string.format("%s -&gt; %s is oneway (%s-&gt;%s type)\n", roomid, otherroom,
          (envidsr and envidsr[getRoomEnv(roomid)] or "?"),
          (envidsr and envidsr[getRoomEnv(otherroom)] or "?")),
        [[mmp.gotoRoom(]]..roomid..[[)]], "Click to go to the start room "..roomid, true)
        c = c + 1
     end
    end
  end
end

mmp.echo(string.format("Found %s oneways.%s", c, (c &gt; 10 and " Have fun. Click on lines to go to the rooms." or "")))</script>
							<command></command>
							<packageName></packageName>
							<regex>^find single exits$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Show char marks</name>
							<script>local c = 0
local m = {}
local areas = getAreaTable()
local show_area = table.size(areas) &gt; 1 and true or false

for area, id in pairs(areas) do
  for _, roomid in pairs(getAreaRooms(id)) do
    local c = getRoomChar(roomid)
    if c ~= '' and c ~= ' ' then
      m[c] = m[c] or {}
      m[c][#m[c]+1] = roomid
    end
  end
end

if not next(m) then mmp.echo("This map has no char marks on it. Do mc on and rcc &lt;mark&gt; in a room to add them!") return end

for letter, rooms in pairs(m) do
  table.sort(rooms)
  mmp.echo("Rooms with the &lt;"..mmp.settings.echocolour.."&gt;"..letter.."&lt;reset&gt; character on them:")
  for i = 1, #rooms do
    if not show_area then
      cecho(string.format("  &lt;sea_green&gt;%-5s&lt;reset&gt; %s\n", rooms[i], getRoomName(rooms[i])))
    else
      cecho(string.format("  &lt;sea_green&gt;%-5s&lt;reset&gt; %-35s &lt;dim_grey&gt;(in&lt;reset&gt; %s&lt;dim_grey&gt;)\n", rooms[i], getRoomName(rooms[i]), mmp.areatabler[getRoomArea(rooms[i])]))
    end
  end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^show char marks$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Delete all special exits across a map</name>
							<script>mmp.delSpecialExits(matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^spe delete all(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>Toggle mapping mode</name>
						<script>if (matches[2] and matches[2] == "on") or (not matches[2] and not mmp.editing) then
  mmp.editing = true
  enableAlias("mm Mapping")

  mmp_regenerate_areas()
  mmp.highlight_unfinished_rooms()

  mmp.echo("Mapping mode enabled. Happy mapping!")
elseif (matches[2] and matches[2] == "off") or (not matches[2] and mmp.editing) then
  mmp.editing = false
  disableAlias("mm Mapping")
  mmp.echo("Mapping mode disabled.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:mc|map create) ?(on|off)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Save a map</name>
						<script>local function s(loc)
    if not saveMap(loc) then
      mmp.echo("Couldn't save the map :(")
    else
      if loc ~= "" then mmp.echo("Map saved.") else mmp.echo("Saved the default map.") end
    end
end

if not saveMap then
  mmp.echo("Your Mudlet can't save maps. Please upgrade it!")
else
  if matches[2] and matches[2] == "custom" then
    s(invokeFileDialog(false, "Please select the folder to save the map in and hit Open").."/Mudlet map from "..os.date("%A %d, %b '%y")..".dat")
  elseif matches[2] then
	s(getMudletHomeDir().."/map/"..matches[2])
  else
    s("")
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^map save(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Load a map</name>
						<script>local function s(loc)
    if not loadMap(loc) then
      mmp.echo("Couldn't load the map :(")
    else
      mmp.lockWormholes(); mmp.lockSewers(); mmp.lockPebble();
      if mmp.settings.waterwalk then mmp.enableWaterWalk() else mmp.disableWaterWalk() end

      if loc ~= "" then mmp.echo("Map loaded.") else mmp.echo("Loaded the default map.") end
      raiseEvent("mmapper updated map")
    end
end

if not loadMap then
  mmp.echo("Your Mudlet can't load maps. Please upgrade it!")
else
  if matches[2] and matches[2] == "custom" then
    s(invokeFileDialog(true, "Please select the map file and click Open to load it"))
  elseif matches[2] then
	s(getMudletHomeDir().."/map/"..matches[2])
  else
    s("")
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^map load(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Get dirs</name>
						<script>if not matches[2] and not matches[3] then
  mmp.echo("Where do you want to showpath to?")
elseif matches[2] and not matches[3] then
  mmp.echoPath(mmp.currentroom, matches[2])
else
  mmp.echoPath(matches[2], matches[3])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^showpath(?: (\d+))?(?: (\d+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Check wholist</name>
						<script>enableTrigger("Parse wholist")
send("who b")
tempTimer(10, [[disableTrigger'Parse wholist']])</script>
						<command></command>
						<packageName></packageName>
						<regex>^who b$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Add Room Mark</name>
						<script>local tmp = getRoomUserData(1, "gotoMapping")
local maptable = {}

if tmp ~= "" then
  maptable = yajl.to_value(tmp)
end

local location, markname
if not matches[3] then
  markname = matches[2]
  location = mmp.currentroom
elseif tonumber(matches[2]) then
  location = matches[2]; markname = matches[3]
else
  location = matches[3]; markname = matches[2]
end

-- can't allow mark name to ne a number - yajl then generates a giant table of null's
if tonumber(markname) then
  mmp.echo("The mark name can't be a number.") return
end

maptable[markname] = location
local tmp2 = yajl.to_string(maptable)

if not mmp.roomexists(1) then
  addRoom(1)
end

setRoomUserData(1, "gotoMapping", tmp2)
mmp.echo(string.format("Room mark for '%s' set to room %s.", markname, location))</script>
						<command></command>
						<packageName></packageName>
						<regex>^room mark (\w+)(?: (\w+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Remove Room Mark</name>
						<script>local tmp= getRoomUserData(1, "gotoMapping")
if tmp~="" then
  local maptable=yajl.to_value(tmp)
  if not maptable[matches[2]] then mmp.echo("Don't have such a mark in the db.") return end

  maptable[matches[2]]=nil
  local tmp2=yajl.to_string(maptable)
  setRoomUserData(1, "gotoMapping", tmp2)
  mmp.echo("Removed the "..matches[2].." mark.")
else
  mmp.echo("We don't have any marks stored anyway.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^room unmark (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Display Room Marks</name>
						<script>local tmp= getRoomUserData(1, "gotoMapping")
if tmp~="" then
	local maptable = yajl.to_value(tmp) or {}
    local sortedkeys = {}
    for k in pairs(maptable) do sortedkeys[#sortedkeys+1] = k end
    table.sort(sortedkeys)

    mmp.echo("Known marks in this map:")
    if next(maptable) then
      for i = 1, #sortedkeys do echo(string.format("  %-21s  %s\n", tostring(sortedkeys[i]), tostring(maptable[sortedkeys[i]]))) end
    else
      echo("  (none)\n")
    end
else
	mmp.echo("No marks are recorded in this map.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^room marks$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Toggle map sizes</name>
						<script>local size = matches[2]

if size == "biggest" then
  mapper = Geyser.Mapper:new({
    name = "mapper",
    x = 0, y = 0,
    width = "100%", height = "97%"
  })
  mmp.echo("Map size set to pretty damn big.")

elseif size == "small" then
  mapper = Geyser.Mapper:new({
    x = "70%", y = 0,
    width = "28%", height = "50%"
  })
  mmp.echo("Map size set to comfortable.")

elseif size == "big" then
  local window_width, window_height = getMainWindowSize()
  local used_width = getMainConsoleWidth()

  local available_space = window_width - used_width

  if matches[3] then available_space = available_space - tonumber(matches[3]) end

  mapper = Geyser.Mapper:new({
    x = available_space*-1, y = 0,
    width = available_space, height = "100%"
  })

  mmp.echo("Set the map size to big - it'll cover all of the space on the right that game text isn't using. You'll want to call this alias again if you resize the window to update.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(small|big|biggest)map(?: (\d+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>^make maps$</name>
						<script>local c = 0
for _, id in pairs(getAreaTable()) do
  tempTimer(c*.5, [[exportAreaImage(]]..id..[[)]])
  c = c + 1
end
mmp.echo("Done!")</script>
						<command></command>
						<packageName></packageName>
						<regex>^make maps$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Set debug mode</name>
						<script>if matches[2] == "on" then
  mmp.debug = true
else
  mmp.debug = false
end

mmp.echo("Debug &amp; performance telemetry "..(mmp.debug and "enabled" or "disabled")..".")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:mdg|mdebug) (on|off)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>measure getPath()</name>
						<script>mmp = mmp or {}

mmp.getPathPerf = mmp.getPathPerf or createStopWatch()
startStopWatch(mmp.getPathPerf)

local from, to = tonumber(matches[2]), tonumber(matches[3])

getPath(from, to)

mmp.echon = mmp.echon or echo
mmp.echon("a new getPath() from "..from.." to "..to.." took "..stopStopWatch(mmp.getPathPerf).."s. There are "..#speedWalkPath.." rooms to visit in it.")
echo(" ")
echoLink("[unhighlight]", [[
  for room in pairs(mmp.getpathhighlights) do
    unHighlightRoom(room)
  end
]], "Click me to remove highlighting from getpath")

mmp.getpathhighlights = mmp.getpathhighlights or {}

for room in pairs(mmp.getpathhighlights) do
  unHighlightRoom(room)
end

mmp.getpathhighlights = {}

local r,g,b = unpack(color_table.yellow)
local br,bg,bb = unpack(color_table.yellow)
-- add the first room to the speedWalkPath, as we'd like it highlighted as well
table.insert(speedWalkPath, 1, from)
for i = 1, #speedWalkPath do
  local room = speedWalkPath[i]
  highlightRoom(room, r,g,b,br,bg,bb, 1, 255, 255)
  mmp.getpathhighlights[room] = true
end

centerview(from)</script>
						<command></command>
						<packageName></packageName>
						<regex>^getpath (?:from )?(\d+) (?:to )?(\d+)$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Game-specific</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Lusternia</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Lock or unlock pathfinding exits</name>
								<script>mmp.lockpaths(matches[2]:lower()=="lock")</script>
								<command></command>
								<packageName></packageName>
								<regex>(?i)^(lock|unlock) paths$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Link through manse</name>
								<script>local portalRooms = {
gaudiguch="19861",
glomdoring="7747",
celest="6834",
serenwilde="6833",
hallifax="19937",
magnagora="6832",
aetherplex="6831",
}

if mmp.game ~= "lusternia" then return end
matches[2]=matches[2]:lower()
matches[3]=matches[3]:lower()
local manse, city
if portalRooms[matches[2]] then
	city=matches[2]
	manse=matches[3]
elseif portalRooms[matches[3]] then
	city=matches[3]
	manse=matches[2]
else
	mmp.echo("Invalid city")
	return
end
if not gmcp.Room.Info.area:find("(manse)") then
	mmp.echo("You are not in a manse")
else
	if	searchRoom(gmcp.Room.Info.num):sub(0,11)=="searchRoom:" then
		addRoom(gmcp.Room.Info.num)
	end
	if getRoomArea(gmcp.Room.Info.num)==-1 then
		setRoomArea(gmcp.Room.Info.num,addAreaName(manse:title().." Manse"))
	end
	setRoomChar(gmcp.Room.Info.num,"A")
	addSpecialExit(portalRooms[city],gmcp.Room.Info.num,"Portal enter "..manse)
	addSpecialExit(portalRooms["aetherplex"],gmcp.Room.Info.num,"Portal enter "..manse)
	addSpecialExit(gmcp.Room.Info.num,portalRooms["aetherplex"],"portal exit aetherplex")
	addSpecialExit(gmcp.Room.Info.num,portalRooms[city],"portal exit "..city)
	mmp.echo(city:title().." has been linked to the Aetherplex through "..manse:title())
end</script>
								<command></command>
								<packageName></packageName>
								<regex>(?i)^manselink (\w+) (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Astral jumping boots</name>
								<script>mmp.astroboots(matches[2]:lower()=="on")
mmp.echo("&lt;yellow&gt;Astral jumping "..(matches[2]:lower()=="on" and "enabled" or "disabled").."!")</script>
								<command></command>
								<packageName></packageName>
								<regex>(?i)astroboots (on|off)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Wildnodes toggle</name>
								<script>if mmp.game ~= "lusternia" then return end
mmp.wildnodes(matches[2]:lower()=="on")
mmp.echo("All astral nodes have been "..(matches[2]:lower()=="on" and "" or "un").."linked.")</script>
								<command></command>
								<packageName></packageName>
								<regex>(?i)^nodes (on|off)$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
</MudletPackage>
